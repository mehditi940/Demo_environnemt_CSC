        "/room",
        true,
        bodyData,
        files
      );
    },

    /**
     * Get all rooms (Only Admin can get all rooms) Retrieves a list of all rooms with patients and models.
     *
     * @param {number} limit - The maximum number of rooms to return.
     * @returns {Promise<Array<{
     * id: string;
     * name: string;
     * patient: {
     *  id: string;
     *  firstName: string;
     *  lastName: string;
     *  nummer: string;
     * } | undefined;
     * models: Array<{
     *  id: string;
     *  name: string;
     *  path: string;
     * }>;
     * }>>} - A promise resolving to an array of room objects.
     *
     * @example
     * // Successful Response:
     * [
     *   {
     *     "id": "room123",
     *     "name": "ICU Room 1",
     *     "patient": {
     *       "id": "patient123",
     *       "name": "John Doe"
     *     },
     *     "models": [
     *       {
     *         "id": "model123",
     *         "name": "MRI Scan Model"
     *       }
     *     ]
     *   }
     * ]
     */
    async get_rooms(limit = undefined) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get("/room", true, { limit });
    },

    /**
     * Get a room by ID (Only Admin can get a room by ID).
     * Retrieves a specific room with its details.
     *
     * @param {string} id - The ID of the room to retrieve.
     * @returns {Promise<{
     *   id: string,
     *   name: string,
     *   patient?: {
     *     id: string,
     *     firstName: string,
     *     lastName: string,
     *     nummer: string
     *   },
     *   models: Array<{
     *     id: string,
     *     name: string,
     *     path: string
     *   }>
     * }>} - A promise resolving to the room object.
     *
     * @example
     * // Successful Response:
     * {
     *   "id": "room123",
     *   "name": "ICU Room 1",
     *   "patient": {
     *     "id": "patient123",
     *     "firstName": "John",
     *     "lastName": "Doe",
     *     "nummer": "123456789"
     *   },
     *   "models": [
     *     {
     *       "id": "model123",
     *       "name": "MRI Scan Model",
     *       "path": "/path/to/model"
     *     }
     *   ]
     * }
     */
    async get_room(id) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get(`/room/${id}`, true);
    },

    /**
     * Delete a room (Only Admin can delete a room).
     *
     * @param {string} id - The ID of the room to delete.
     * @returns {Promise<{
     *  message: string
     * }>} - The response from the server.
     */
    async delete_room(id) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#delete(`/room/${id}`, true);
    },

    async update_room(id, data = {}, files = [], modelsToRemove = []) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#update(
        `/room/${id}`,
        true,
        {
          ...data,
          modelsToRemove: JSON.stringify(modelsToRemove), // Zorg voor correcte serialisatie
        },
        files
      );
    },

    /**
     * Get the token used for authentication.
     * @returns String - The token used for authentication.
     */
    get_token() {
      const apiInstance = APIHandler.getInstance();
      return apiInstance.#token;
    },
  };

  /**
   * Connection methods
   * @description Methods for managing connections, including creating and retrieving connections.
   */
  connection = {
    /**
     * Create a new connection for a room.
     * This method is used to create a connection for a specific room.
     * @param {string} roomId - The ID of the room for which the connection is being created.
     * @returns {Promise<{
     * roomId: string
     * socketUrl: string
     * pinCode: string
     * qrCodeString: string
     * }>} - A promise that resolves to the response from the server.
     */
    async create_connection(roomId) { 
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#post(`/connection`, true, {roomId});
    }
  }
}

const resolvedBaseUrl = import.meta.env.VITE_API_URL || "http://localhost:3001";
if (!resolvedBaseUrl) {
  // Defensive: should never hit due to default
  throw new Error("VITE_API_URL is not configured and no default could be resolved");
}
const dummyAPI = new APIHandler(resolvedBaseUrl);
export default dummyAPI;
