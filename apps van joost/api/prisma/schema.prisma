// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  surgeon
  admin
  system
}

enum RoomType {
  patient
  surgeon
  demo
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  salt      String
  firstName String
  lastName  String
  role      Role     @default(user)
  deleted   String   @default("false")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rooms      Room[]
  models     Model[]
  connections Connection[]
  userRooms  UserRoom[]

  @@map("users")
}

model Patient {
  id        String   @id @default(cuid())
  nummer    String   @unique
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rooms Room[]

  @@map("patients")
}

model Room {
  id        String   @id @default(cuid())
  name      String
  patient   String?
  type      RoomType @default(patient)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator     User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  patientRef  Patient?     @relation(fields: [patient], references: [id], onDelete: SetNull)
  models      Model[]
  connections Connection[]
  userRooms   UserRoom[]

  @@map("rooms")
}

model Connection {
  id        String   @id @default(cuid())
  pinCode   String
  startedBy String
  roomId    String
  createdAt DateTime @default(now())
  validUntil DateTime

  // Relations
  starter User @relation(fields: [startedBy], references: [id], onDelete: Cascade)
  room    Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("connection")
}

model Model {
  id        String   @id @default(cuid())
  name      String
  path      String
  content   String?  // Base64 encoded file content (nullable for migration)
  mimeType  String?  // Store MIME type for proper serving (nullable for migration)
  addedBy   String
  roomId    String
  createdAt DateTime @default(now())

  // Relations
  adder User @relation(fields: [addedBy], references: [id], onDelete: Cascade)
  room  Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("models")
}

model UserRoom {
  userId String
  roomId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
  @@map("users_to_groups")
}