      role,
      password,
    });
    
    // Controleer of response bestaat
    if (!response) {
      throw new Error("Geen response van server");
    }
    
    return response; // Zorg dat je de response retourneert
    
  } catch (error) {
    console.error("Register error:", error);
    throw error; // Gooi de error door naar de caller
  }
},
    /**
     * Get the current user
     * @returns {Promise<Object>}
     */
    async me() {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get("/auth/me", true);
    },

    /**
     * Change the password of a user only super admin can change the password of other users
     * @param {string} userId the id of the user having the password to be changed
     * @param {*} newPassword the new password to be set for the user
     * @returns {Promise<Object>} the response from the server
     */
    async change_password(userId, password) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#post(`/auth/change-password`, true, {
        password,
        userId,
      });
    },

    /**
     * Delete a user account only super admin can delete other users accounts
     * @param {string} id the id of the user to be deleted
     * @returns {Promise<Object>} the response from the server
     */
    async delete_account(id) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#delete(`/auth/account/${id}`, true);
    },

    /**
     * Get all users
     * @returns {Promise<Array<{
     *  id: string,
     *  firstName: string,
     * lastName: string,
     * email: string,
     * role: string,
     * createdAt: string,
     * updatedAt: string
     * }>>} - A promise resolving to an array of user objects.
     */
    async get_users() {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get("/auth/users", true);
    },

    /**
     * Change the password of a user by email
     * @param {string} email the email of the user having the password to be changed
     * @param {string} password the new password to be set for the user
     * @returns {Promise<Object>} the response from the server
     * */
    async change_password_by_email(email, password) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#post("/auth/change-password-by-email", true, {
        email,
        password,
      });
    },

    /**
     * Get a user by email
     * @param {string} email the email of the user to be retrieved
     * @returns {Promise<Object>} the response from the server
     * */
    async get_account_by_email(email) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get(`/auth/account/${email}`, true);
    },

    /**
     * Get a user by ID
     * @param {string} id the id of the user to be retrieved
     * @returns {Promise<Object>} the response from the server
     * */
    async get_user(id) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get(`/auth/account/${id}`, true);
    },
  };

  /**
   * Patient methods
   * @description Methods for managing patients, including creating, retrieving, and deleting patients.
   */
  patient = {
    /**
     * Create a new patient (Only Super Admin can create a new patient)
     *
     * @param {Object} data - The data to be sent to the server to create a new patient.
     * @param {string} data.nummer - The patient's unique number.
     * @param {string} data.firstName - The patient's first name.
     * @param {string} data.lastName - The patient's last name.
     * @returns {Promise<Object>} - The response from the server.
     *
     * @example
     * // Request Body:
     * {
     *   "nummer": "123456789",
     *   "firstName": "John",
     *   "lastName": "Doe"
     * }
     *
     * @example
     * // Successful Response:
     * {
     *   "id": "550e8400-e29b-41d4-a716-446655440000",
     *   "message": "Patient created successfully"
     * }
     */
    async create_patient(data) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#post("/patient", true, data);
    },

    /**
     * Get all patients (Only Admin can get all patients)
     *
     * @param {number} limit - The maximum number of patients to return.
     * @returns {Promise<Array<{
     *   id: string,
     *   nummer: string,
     *   firstName: string,
     *   lastName: string,
     *   createdAt: string,
     *   updatedAt: string
     * }>>} - A promise resolving to an array of patient objects.
     *
     * @example
     * // Successful Response:
     * [
     *   {
     *     "id": "550e8400-e29b-41d4-a716-446655440000",
     *     "nummer": "123456789",
     *     "firstName": "John",
     *     "lastName": "Doe",
     *     "createdAt": "2024-03-17T12:00:00Z",
     *     "updatedAt": "2024-03-18T14:30:00Z"
     *   }
     * ]
     */
    async get_patients(limit = undefined) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get("/patient", true, { limit });
    },

    /**
     * Get a patient by ID (Only Admin can get a patient by ID)
     *
     * @param {string} id - The ID of the patient to retrieve.
     * @returns {Promise<{
     *   id: string,
     *   nummer: string,
     *   firstName: string,
     *   lastName: string,
     *   createdAt: string,
     *   updatedAt: string
     * }>} - A promise resolving to the patient object.
     *
     * @example
     * // Successful Response:
     * {
     *   "id": "550e8400-e29b-41d4-a716-446655440000",
     *   "nummer": "123456789",
     *   "firstName": "John",
     *   "lastName": "Doe",
     *   "createdAt": "2024-03-17T12:00:00Z",
     *   "updatedAt": "2024-03-18T14:30:00Z"
     * }
     */
    async get_patient(id) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#get(`/patient/${id}`, true);
    },

    /**
     * Delete a patient (Only Admin can delete a patient)
     *
     * @param {string} id - The ID of the patient to delete.
     * @returns {Promise<Object>} - The response from the server.
     */
    async delete_patient(id) {
      const apiInstance = APIHandler.getInstance();
      return await apiInstance.#delete(`/patient/${id}`, true);
    },
  };

  /**
   * Room methods
   * @description Methods for managing rooms, including creating, retrieving, and deleting rooms.
   */
  room = {
    /**
     * Create a new room (Only Super Admin can create a new room)
     *
     * @param {string} name - Name of the room.
     * @param {File[]} files - Models to be uploaded to the room.
     * @param {string} patient - Patient ID to be assigned to the room.
     * @param {string[]} users - Users to be assigned to the room that can access it.
     * @returns {Promise<{
     *   id: string,
     *   message: string
     * }>} - A promise resolving to an object containing the room ID and success message.
     *
     * @example
     * // Successful Response:
     * {
     *   "id": "550e8400-e29b-41d4-a716-446655440000",
     *   "message": "Room created successfully"
     * }
     */
    create_room: async function (name, files, patient = null, users = []) {
      const apiInstance = APIHandler.getInstance();

      // Maak een object zonder users als lege array en zonder patient als null
      const bodyData = { name };
      if (patient) bodyData.patient = patient;
      if (users.length > 0) bodyData.users = users; // array, niet string!

      return await apiInstance.#postFile(
